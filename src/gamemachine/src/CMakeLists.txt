gm_begin_project()

include_directories(
		./
		../include
		../../3rdparty/glew-2.1.0/include
		../../3rdparty/libpng
		../../3rdparty/jpeg-6b
		../../3rdparty/zlib
		../../3rdparty/freetype-2.8.1/include
		../../3rdparty/libmad
		../../3rdparty/lua/src
		../../3rdparty/glm-0.9.9-a2
		../../3rdparty/bullet3-2.87/src
		../../3rdparty/assimp-3.3.1/include
	)

set(SOURCES
		stdafx.cpp
		stdafx.h
		common.h

		gmdata/glyph/gmglyphmanager.h
		gmdata/glyph/gmglyphmanager.cpp
		gmdata/imagereader/gmimagereader.h
		gmdata/imagereader/gmimagereader.cpp
		gmdata/imagereader/gmimagereader_bmp.h
		gmdata/imagereader/gmimagereader_bmp.cpp
		gmdata/imagereader/gmimagereader_jpg.h
		gmdata/imagereader/gmimagereader_jpg.cpp
		gmdata/imagereader/gmimagereader_png.h
		gmdata/imagereader/gmimagereader_png.cpp
		gmdata/imagereader/gmimagereader_tga.h
		gmdata/imagereader/gmimagereader_tga.cpp
		gmdata/modelreader/gmmodelreader.h
		gmdata/modelreader/gmmodelreader.cpp
		gmdata/modelreader/gmmodelreader_assimp.h
		gmdata/modelreader/gmmodelreader_assimp.cpp
		gmdata/gamepackage/gmgamepackage.h
		gmdata/gamepackage/gmgamepackage.cpp
		gmdata/gamepackage/gmgamepackagehandler.h
		gmdata/gamepackage/gmgamepackagehandler.cpp
		gmdata/xml/tinyxml2/tinyxml2.h
		gmdata/xml/tinyxml2/tinyxml2.cpp
		gmdata/xml/gmxml.h
		gmdata/xml/gmxml.cpp
		gmdata/gmimage.h
		gmdata/gmimage.cpp
		gmdata/gmimagebuffer.h
		gmdata/gmimagebuffer.cpp
		gmdata/gmmodel.h
		gmdata/gmmodel.cpp
		gmdata/gmskeleton.h
		gmdata/gmskeleton.cpp
		gmdata/gmshader.h
		gmdata/gmshader.cpp
		gmengine/gmgraphicengine.h
		gmengine/gmgraphicengine.cpp
		gmengine/gmassets.h
		gmengine/gmassets.cpp
		gmengine/gmgameworld.h
		gmengine/gmgameworld.cpp
		gmengine/gmlight.h
		gmengine/gmlight.cpp
		gmengine/gmcamera.h
		gmengine/gmcamera.cpp
		gmengine/gmdemogameworld.h
		gmengine/gmdemogameworld.cpp
		gmengine/gmtypoengine.h
		gmengine/gmtypoengine.cpp
		gmengine/gmgbuffer.h
		gmengine/gmgbuffer.cpp
		gmengine/gmmessage.h
		gmengine/gmmessage.cpp
		gmengine/gmanimation.h
		gmengine/gmanimation.cpp
		gmengine/gmrendertechnique.cpp
		gmengine/gmrendertechnique.cpp
		gmengine/gmprimitivemanager.h
		gmengine/gmprimitivemanager.cpp
		gmengine/gameobjects/gmgameobject.h
		gmengine/gameobjects/gmgameobject.cpp
		gmengine/gameobjects/gmspritegameobject.h
		gmengine/gameobjects/gmspritegameobject.cpp
		gmengine/gameobjects/gm2dgameobject.h
		gmengine/gameobjects/gm2dgameobject.cpp
		gmengine/gameobjects/gmskeletalgameobject.h
		gmengine/gameobjects/gmskeletalgameobject.cpp
		gmengine/particle/gmparticle.h
		gmengine/particle/gmparticle.cpp
		gmengine/particle/gmparticleeffects.h
		gmengine/particle/gmparticleeffects.cpp
		gmengine/particle/gmparticlemodel.h
		gmengine/particle/gmparticlemodel.cpp
		gmengine/ui/gmwidget.h
		gmengine/ui/gmwidget.cpp
		gmengine/ui/gmwindow.h
		gmengine/ui/gmwindow.cpp
		gmengine/ui/gmcontrols.h
		gmengine/ui/gmcontrols.cpp
		gmengine/ui/gmcontroltextedit.h
		gmengine/ui/gmcontroltextedit.cpp
		gmengine/ui/gmuiconfiguration.h
		gmengine/ui/gmuiconfiguration.cpp
		gmengine/gmenums.h
		gmgl/gmgltechniques.h
		gmgl/gmgltechniques.cpp
		gmgl/gmglfactory.h
		gmgl/gmglfactory.cpp
		gmgl/gmglgbuffer.h
		gmgl/gmglgbuffer.cpp
		gmgl/gmglglyphmanager.h
		gmgl/gmglglyphmanager.cpp
		gmgl/gmglgraphic_engine.h
		gmgl/gmglgraphic_engine.cpp
		gmgl/gmglmodeldataproxy.h
		gmgl/gmglmodeldataproxy.cpp
		gmgl/gmglshaderprogram.h
		gmgl/gmglshaderprogram.cpp
		gmgl/gmgltexture.h
		gmgl/gmgltexture.cpp
		gmgl/gmglframebuffer.h
		gmgl/gmglframebuffer.cpp
		gmgl/gmgllight.h
		gmgl/gmgllight.cpp
		gmgl/gmglhelper.h
		gmgl/gmglhelper.cpp
		gmgl/shader_constants.h
		gmphysics/gmphysicsworld.h
		gmphysics/gmphysicsworld.cpp
		gmphysics/gmphysicsshape.h
		gmphysics/gmphysicsshape.cpp
		gmphysics/gmphysicsobject.h
		gmphysics/gmphysicsobject.cpp
		gmphysics/gmdiscretedynamicsworld.h
		gmphysics/gmdiscretedynamicsworld.cpp
		gmphysics/gmconstraint.h
		gmphysics/gmconstraint.cpp
		gmphysics/gmbulletincludes.h
		gmphysics/gmbulletforward.h
		foundation/utilities/tools.h
		foundation/utilities/tools.cpp
		foundation/utilities/utilities.h
		foundation/utilities/utilities.cpp
		foundation/input.h
		foundation/defines.h
		foundation/debug.h
		foundation/debug.cpp
		foundation/assert.h
		foundation/assert.cpp
		foundation/gmconfigs.h
		foundation/gmconfigs.cpp
		foundation/memory.h
		foundation/memory.cpp
		foundation/linearmath.h
		foundation/linearmath.inl
		foundation/gmobject.h
		foundation/gmobject.cpp
		foundation/gamemachine.h
		foundation/gamemachine.cpp
		foundation/interfaces.h
		foundation/gmvariant.h
		foundation/gmvariant.cpp
		foundation/gmthread.h
		foundation/gmprofile.h
		foundation/gmprofile.cpp
		foundation/gmstring.h
		foundation/gmstring.cpp
		foundation/gmtransaction.h
		foundation/gmtransaction.cpp
		foundation/gmasync.h
		foundation/gmasync.cpp
		gmlua/gmlua.h
		gmlua/gmlua.cpp
		gmlua/gmlua_functions.h
		gmlua/gmlua_functions.cpp
		gmlua/gmluameta.h
		gmlua/meta/gamemachine_meta.h
		gmlua/meta/gamemachine_meta.cpp
		gmlua/meta/gmdebugger_meta.h
		gmlua/meta/gmdebugger_meta.cpp
		gmlua/meta/ifactory_meta.h
		gmlua/meta/ifactory_meta.cpp
		gmlua/meta/iwindow_meta.h
		gmlua/meta/iwindow_meta.cpp
		gmlua/meta/igamehandler_meta.h
		gmlua/meta/igamehandler_meta.cpp
		gmlua/meta/irendercontext_meta.h
		gmlua/meta/irendercontext_meta.cpp
		gmlua/meta/gmgamepackage_meta.h
		gmlua/meta/gmgamepackage_meta.cpp
		gmlua/meta/igraphicengine_meta.h
		gmlua/meta/igraphicengine_meta.cpp

		extensions/bsp/bsp_factory.h
		extensions/bsp/bsp_factory.cpp
		extensions/bsp/data/gmbsp.h
		extensions/bsp/data/gmbsp.cpp
		extensions/bsp/data/gmbsp_render.h
		extensions/bsp/data/gmbsp_render.cpp
		extensions/bsp/data/gmbsp_shader_loader.h
		extensions/bsp/data/gmbsp_shader_loader.cpp
		extensions/bsp/data/gmbsp_surface_flags.h
		extensions/bsp/physics/gmbsptrace.h
		extensions/bsp/physics/gmbsptrace.cpp
		extensions/bsp/physics/gmbspphysicsworld.h
		extensions/bsp/physics/gmbspphysicsworld.cpp
		extensions/bsp/physics/gmbspphysicsstructs.h
		extensions/bsp/physics/gmbsppatch.h
		extensions/bsp/physics/gmbsppatch.cpp
		extensions/bsp/physics/gmbspmove.h
		extensions/bsp/physics/gmbspmove.cpp
		extensions/bsp/render/gmbspgameworldprivate.h
		extensions/bsp/render/gmbspgameworldprivate.cpp
		extensions/bsp/render/gmbspgameworld.h
		extensions/bsp/render/gmbspgameworld.cpp
	)

set(WIN32_SOURCES
		foundation/platforms/windows/check.h
		foundation/platforms/windows/event.cpp
		foundation/platforms/windows/path.cpp
		foundation/platforms/windows/timer.cpp
		foundation/platforms/windows/screen.cpp
		foundation/platforms/windows/thread.cpp
		foundation/platforms/windows/clipboard.cpp
		foundation/platforms/windows/utils.cpp
		foundation/platforms/windows/gamemachine.cpp
		foundation/platforms/windows/window/gmwindow.cpp
		foundation/platforms/windows/window/gmwindow_opengl.cpp
		foundation/platforms/windows/window/gminput.h
		foundation/platforms/windows/window/gminput.cpp
	)

set(WIN32_DX11_SOURCES
		foundation/utilities/gmcom.h
		foundation/platforms/windows/window/gmwindow_dx11.cpp

		gmdx11/gmdx11factory.h
		gmdx11/gmdx11factory.cpp
		gmdx11/gmdx11graphic_engine.h
		gmdx11/gmdx11graphic_engine.cpp
		gmdx11/gmdx11modeldataproxy.h
		gmdx11/gmdx11modeldataproxy.cpp
		gmdx11/gmdx11helper.h
		gmdx11/gmdx11helper.cpp
		gmdx11/gmdx11techniques.h
		gmdx11/gmdx11techniques.cpp
		gmdx11/gmdx11texture.h
		gmdx11/gmdx11texture.cpp
		gmdx11/gmdx11shaderprogram.h
		gmdx11/gmdx11shaderprogram.cpp
		gmdx11/gmdx11glyphmanager.h
		gmdx11/gmdx11glyphmanager.cpp
		gmdx11/gmdx11framebuffer.h
		gmdx11/gmdx11framebuffer.cpp
		gmdx11/gmdx11gbuffer.h
		gmdx11/gmdx11gbuffer.cpp
		gmdx11/gmdx11light.h
		gmdx11/gmdx11light.cpp

		gmdx11/effects/pchfx.h
		gmdx11/effects/d3dx11dbg.cpp
		gmdx11/effects/d3dxGlobal.cpp
		gmdx11/effects/Effect.h
		gmdx11/effects/EffectAPI.cpp
		gmdx11/effects/EffectLoad.cpp
		gmdx11/effects/EffectLoad.h
		gmdx11/effects/EffectNonRuntime.cpp
		gmdx11/effects/EffectReflection.cpp
		gmdx11/effects/EffectRuntime.cpp
		gmdx11/effects/EffectVariable.inl
		gmdx11/effects/inc/d3dx11dbg.h
		gmdx11/effects/inc/d3dx11effect.h
		gmdx11/effects/inc/d3dxGlobal.h
		gmdx11/effects/binary/EffectBinaryFormat.h
		gmdx11/effects/binary/EffectStateBase11.h
		gmdx11/effects/binary/EffectStates11.h
		gmdx11/effects/binary/SOParser.h
	)

set(UNIX_SOURCES
		foundation/platforms/unix/check.h
		foundation/platforms/unix/thread.cpp
		foundation/platforms/unix/timer.cpp
		foundation/platforms/unix/gamemachine.cpp
		foundation/platforms/unix/screen.cpp
		foundation/platforms/unix/path.cpp
		foundation/platforms/unix/clipboard.cpp
		foundation/platforms/unix/utils.cpp
		foundation/platforms/unix/event.cpp
		foundation/platforms/unix/window/gmwindow.cpp
		foundation/platforms/unix/window/gmwindow_opengl.cpp
		foundation/platforms/unix/window/gminput.h
		foundation/platforms/unix/window/gminput.cpp
		foundation/platforms/unix/window/gmxrendercontext.h
		foundation/platforms/unix/window/gmxrendercontext.cpp
		foundation/platforms/unix/window/gmwindowhelper.h
		foundation/platforms/unix/window/gmwindowhelper.cpp
	)

if(WIN32)
	list(APPEND SOURCES ${WIN32_SOURCES})
endif(WIN32)

if(UNIX)
	list(APPEND SOURCES ${UNIX_SOURCES})
endif(UNIX)

if(GM_USE_DX11)
	list(APPEND SOURCES ${WIN32_DX11_SOURCES})
endif(GM_USE_DX11)

gm_source_group_by_dir(SOURCES)
gm_add_msvc_precompiled_header("stdafx.h" "stdafx.cpp" ${SOURCES})

set (gm_static_name gamemachine_static)
add_library(${gm_static_name} STATIC
		${SOURCES}
	)
gm_link_gamemachine_libraries(${gm_static_name} PRIVATE)
gm_set_target_properties(${gm_static_name})
gm_end_project(${gm_static_name})

if(MSVC)
	set (gm_shared_name gamemachine)
	add_library(${gm_shared_name} SHARED
		${SOURCES}
	)
	gm_set_target_properties(${gm_shared_name})

	# a dll(dynamic) gamemachine project should define GM_DLL and links every library.
	set_target_properties(${gm_shared_name} PROPERTIES DEFINE_SYMBOL GM_DLL)
	gm_link_gamemachine_libraries(${gm_shared_name} PRIVATE)
gm_end_project(${gm_shared_name})
endif(MSVC)
