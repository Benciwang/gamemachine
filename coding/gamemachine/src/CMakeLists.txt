include_directories(
		./
		../../3rdparty/glew/include
		../../3rdparty/libpng
		../../3rdparty/jpeg-6
		../../3rdparty/zlib
		../../3rdparty/freetype-2.3.5/include
	)

set(SOURCES
		stdafx.cpp
		stdafx.h
		common.h

		gmdatacore/bsp/bsp.h
		gmdatacore/bsp/bsp.cpp
		gmdatacore/bsp/bsp_interior.inl
		gmdatacore/bsp/bsp_render.h
		gmdatacore/bsp/bsp_render.cpp
		gmdatacore/bsp/bsp_shader_loader.h
		gmdatacore/bsp/bsp_shader_loader.cpp
		gmdatacore/bsp/bsp_surface_flags.h
		gmdatacore/glyph/glyphmanager.h
		gmdatacore/glyph/glyphmanager.cpp
		gmdatacore/imagereader/imagereader.h
		gmdatacore/imagereader/imagereader.cpp
		gmdatacore/imagereader/imagereader_bmp.h
		gmdatacore/imagereader/imagereader_bmp.cpp
		gmdatacore/imagereader/imagereader_dds.h
		gmdatacore/imagereader/imagereader_dds.cpp
		gmdatacore/imagereader/imagereader_jpg.h
		gmdatacore/imagereader/imagereader_jpg.cpp
		gmdatacore/imagereader/imagereader_png.h
		gmdatacore/imagereader/imagereader_png.cpp
		gmdatacore/imagereader/imagereader_tga.h
		gmdatacore/imagereader/imagereader_tga.cpp
		gmdatacore/modelreader/modelreader.h
		gmdatacore/modelreader/modelreader.cpp
		gmdatacore/modelreader/modelreader_obj.h
		gmdatacore/modelreader/modelreader_obj.cpp
		gmdatacore/soundreader/soundreader.h
		gmdatacore/soundreader/soundreader.cpp
		gmdatacore/soundreader/soundreader_wav.h
		gmdatacore/soundreader/soundreader_wav.cpp
		gmdatacore/bsp_model_loader.h
		gmdatacore/bsp_model_loader.cpp
		gmdatacore/gamepackage.h
		gmdatacore/gamepackage.cpp
		gmdatacore/image.h
		gmdatacore/image.cpp
		gmdatacore/imagebuffer.h
		gmdatacore/imagebuffer.cpp
		gmdatacore/object.h
		gmdatacore/object.cpp
		gmdatacore/shader.h
		gmdatacore/shader.cpp
		gmdatacore/texture.h
		gmdatacore/texture.cpp
		gmdatacore/model.h
		gmdatacore/model.cpp
		gmengine/controllers/resource_container.h
		gmengine/controllers/resource_container.cpp
		gmengine/controllers/graphic_engine.h
		gmengine/controllers/graphic_engine.cpp
		gmengine/controllers/gamepackagehandler.h
		gmengine/controllers/gamepackagehandler.cpp
		gmengine/controllers/gamemachine.h
		gmengine/controllers/gamemachine.cpp
		gmengine/controllers/factory.h
		gmengine/controllers/factory.cpp
		gmengine/controllers/animation.h
		gmengine/controllers/animation.cpp
		gmengine/elements/skygameobject.h
		gmengine/elements/skygameobject.cpp
		gmengine/elements/glyphobject.h
		gmengine/elements/glyphobject.cpp
		gmengine/elements/gameworldprivate.h
		gmengine/elements/gameworldprivate.cpp
		gmengine/elements/gameworld.h
		gmengine/elements/gameworld.cpp
		gmengine/elements/gameobjectprivate.h
		gmengine/elements/gameobjectprivate.cpp
		gmengine/elements/gameobject.h
		gmengine/elements/gameobject.cpp
		gmengine/elements/character.h
		gmengine/elements/character.cpp
		gmengine/elements/bspgameworldprivate.h
		gmengine/elements/bspgameworldprivate.cpp
		gmengine/elements/bspgameworld.h
		gmengine/elements/bspgameworld.cpp
		gmgl/renders/gmgl_render.h
		gmgl/renders/gmgl_renders_glyph.cpp
		gmgl/renders/gmgl_renders_glyph.h
		gmgl/renders/gmgl_renders_object.cpp
		gmgl/renders/gmgl_renders_object.h
		gmgl/renders/gmgl_renders_sky.cpp
		gmgl/renders/gmgl_renders_sky.h
		gmgl/gmglfactory.h
		gmgl/gmglfactory.cpp
		gmgl/gmglfunc.h
		gmgl/gmglfunc.cpp
		gmgl/gmglgamepackagehandler.h
		gmgl/gmglgamepackagehandler.cpp
		gmgl/gmglglyphmanager.h
		gmgl/gmglglyphmanager.cpp
		gmgl/gmglgraphic_engine.h
		gmgl/gmglgraphic_engine.cpp
		gmgl/gmglobjectpainter.h
		gmgl/gmglobjectpainter.cpp
		gmgl/gmglshaders.h
		gmgl/gmglshaders.cpp
		gmgl/gmgltexture.h
		gmgl/gmgltexture.cpp
		gmgl/shader_constants.h
		gmphysics/bsp/bsptrace.h
		gmphysics/bsp/bsptrace.cpp
		gmphysics/bsp/bspphysicsworldprivate.h
		gmphysics/bsp/bspphysicsworldprivate.cpp
		gmphysics/bsp/bspphysicsworld.h
		gmphysics/bsp/bspphysicsworld.cpp
		gmphysics/bsp/bspphysicsstructs.h
		gmphysics/bsp/bsppatch.h
		gmphysics/bsp/bsppatch.cpp
		gmphysics/bsp/bspmove.h
		gmphysics/bsp/bspmove.cpp
		gmphysics/physicsworldprivate.h
		gmphysics/physicsworldprivate.cpp
		gmphysics/physicsworld.h
		gmphysics/physicsworld.cpp
		gmphysics/physicsstructs.h
		gmphysics/collisionobjectfactory.h
		gmphysics/collisionobjectfactory.cpp
		os/wingl_window.h
		os/wingl_window.cpp
		os/directsound_soundplayer.h
		os/directsound_soundplayer.cpp
		utilities/tinyxml/tinystr.cpp
		utilities/tinyxml/tinystr.h
		utilities/tinyxml/tinyxml.cpp
		utilities/tinyxml/tinyxml.h
		utilities/tinyxml/tinyxmlerror.cpp
		utilities/tinyxml/tinyxmlparser.cpp
		utilities/vmath.h
		utilities/scanner.h
		utilities/scanner.cpp
		utilities/plane.h
		utilities/plane.cpp
		utilities/path.h
		utilities/path.cpp
		utilities/memorystream.h
		utilities/memorystream.cpp
		utilities/input.h
		utilities/input.cpp
		utilities/frustum.h
		utilities/frustum.cpp
		utilities/fpscounter.h
		utilities/fpscounter.cpp
		utilities/debug.h
		utilities/debug.cpp
		utilities/camera.h
		utilities/camera.cpp
		utilities/bitset.h
		utilities/bitset.cpp
		utilities/autoptr.h
		utilities/assert.h
		utilities/assert.cpp
		utilities/algorithm.h
		utilities/algorithm.cpp
	)

source_group_by_dir(SOURCES)

add_library(gamemachine
		${SOURCES}
	)

if(MSVC)
	set_target_properties(gamemachine PROPERTIES COMPILE_FLAGS "/W3" ) 
	set_target_properties(gamemachine PROPERTIES COMPILE_FLAGS "/WX" ) 
endif(MSVC)
