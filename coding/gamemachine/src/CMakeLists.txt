include_directories(
		./
		../../3rdparty/glew/include
		../../3rdparty/libpng
		../../3rdparty/jpeg-6b
		../../3rdparty/zlib
		../../3rdparty/freetype-2.3.5/include
		../../3rdparty/libmad
		../../3rdparty/duilib
	)

set(SOURCES
		stdafx.cpp
		stdafx.h
		common.h

		gmdatacore/bsp/gmbsp.h
		gmdatacore/bsp/gmbsp.cpp
		gmdatacore/bsp/gmbsp_render.h
		gmdatacore/bsp/gmbsp_render.cpp
		gmdatacore/bsp/gmbsp_shader_loader.h
		gmdatacore/bsp/gmbsp_shader_loader.cpp
		gmdatacore/bsp/gmbsp_surface_flags.h
		gmdatacore/glyph/gmglyphmanager.h
		gmdatacore/glyph/gmglyphmanager.cpp
		gmdatacore/imagereader/gmimagereader.h
		gmdatacore/imagereader/gmimagereader.cpp
		gmdatacore/imagereader/gmimagereader_bmp.h
		gmdatacore/imagereader/gmimagereader_bmp.cpp
		gmdatacore/imagereader/gmimagereader_dds.h
		gmdatacore/imagereader/gmimagereader_dds.cpp
		gmdatacore/imagereader/gmimagereader_jpg.h
		gmdatacore/imagereader/gmimagereader_jpg.cpp
		gmdatacore/imagereader/gmimagereader_png.h
		gmdatacore/imagereader/gmimagereader_png.cpp
		gmdatacore/imagereader/gmimagereader_tga.h
		gmdatacore/imagereader/gmimagereader_tga.cpp
		gmdatacore/modelreader/gmmodelreader.h
		gmdatacore/modelreader/gmmodelreader.cpp
		gmdatacore/modelreader/gmmodelreader_obj.h
		gmdatacore/modelreader/gmmodelreader_obj.cpp
		gmdatacore/soundreader/gmsoundreader.h
		gmdatacore/soundreader/gmsoundreader.cpp
		gmdatacore/soundreader/gmsoundreader_wav.h
		gmdatacore/soundreader/gmsoundreader_wav.cpp
		gmdatacore/soundreader/gmsoundreader_mp3.h
		gmdatacore/soundreader/gmsoundreader_mp3.cpp
		gmdatacore/gamepackage/gmgamepackage.h
		gmdatacore/gamepackage/gmgamepackage.cpp
		gmdatacore/bsp_model_loader.h
		gmdatacore/bsp_model_loader.cpp
		gmdatacore/image.h
		gmdatacore/image.cpp
		gmdatacore/imagebuffer.h
		gmdatacore/imagebuffer.cpp
		gmdatacore/object.h
		gmdatacore/object.cpp
		gmdatacore/shader.h
		gmdatacore/model.h
		gmdatacore/model.cpp
		gmengine/resource_container.h
		gmengine/resource_container.cpp
		gmengine/gmgameworld.h
		gmengine/gmgameworld.cpp
		gmengine/gmgameobject.h
		gmengine/gmgameobject.cpp
		gmengine/gmcharacter.h
		gmengine/gmcharacter.cpp
		gmengine/gmbspgameworldprivate.h
		gmengine/gmbspgameworldprivate.cpp
		gmengine/gmbspgameworld.h
		gmengine/gmbspgameworld.cpp
		gmgl/renders/gmgl_render.h
		gmgl/renders/gmgl_renders_glyph.cpp
		gmgl/renders/gmgl_renders_glyph.h
		gmgl/renders/gmgl_renders_object.cpp
		gmgl/renders/gmgl_renders_object.h
		gmgl/renders/gmgl_renders_sky.cpp
		gmgl/renders/gmgl_renders_sky.h
		gmgl/gmglfactory.h
		gmgl/gmglfactory.cpp
		gmgl/gmglfunc.h
		gmgl/gmglfunc.cpp
		gmgl/gmglgamepackagehandler.h
		gmgl/gmglgamepackagehandler.cpp
		gmgl/gmglglyphmanager.h
		gmgl/gmglglyphmanager.cpp
		gmgl/gmglgraphic_engine.h
		gmgl/gmglgraphic_engine.cpp
		gmgl/gmglgraphic_engine_default_shaders.h
		gmgl/gmglobjectpainter.h
		gmgl/gmglobjectpainter.cpp
		gmgl/gmglshaderprogram.h
		gmgl/gmglshaderprogram.cpp
		gmgl/gmgltexture.h
		gmgl/gmgltexture.cpp
		gmgl/shader_constants.h
		gmphysics/bsp/gmbsptrace.h
		gmphysics/bsp/gmbsptrace.cpp
		gmphysics/bsp/gmbspphysicsworld.h
		gmphysics/bsp/gmbspphysicsworld.cpp
		gmphysics/bsp/gmbspphysicsstructs.h
		gmphysics/bsp/gmbsppatch.h
		gmphysics/bsp/gmbsppatch.cpp
		gmphysics/bsp/gmbspmove.h
		gmphysics/bsp/gmbspmove.cpp
		gmphysics/gmphysicsworld.h
		gmphysics/gmphysicsworld.cpp
		gmphysics/gmphysicsstructs.h
		gmphysics/collisionobjectfactory.h
		gmphysics/collisionobjectfactory.cpp
		os/gmdirectsound_sounddevice.h
		os/gmdirectsound_sounddevice.cpp
		os/gminput.h
		os/gminput.cpp
		foundation/utilities/tinyxml/tinystr.cpp
		foundation/utilities/tinyxml/tinystr.h
		foundation/utilities/tinyxml/tinyxml.cpp
		foundation/utilities/tinyxml/tinyxml.h
		foundation/utilities/tinyxml/tinyxmlerror.cpp
		foundation/utilities/tinyxml/tinyxmlparser.cpp
		foundation/utilities/utilities.h
		foundation/utilities/utilities.cpp
		foundation/defines.h
		foundation/debug.h
		foundation/debug.cpp
		foundation/assert.h
		foundation/assert.cpp
		foundation/vector.h
		foundation/memory.h
		foundation/memory.cpp
		foundation/linearmath.h
		foundation/linearmath.cpp
		foundation/gmobject.h
		foundation/gmobject.cpp
		foundation/gamemachine.h
		foundation/gamemachine.cpp
		foundation/interfaces.h
		foundation/gmconfig.h
		foundation/gmconfig.cpp
		foundation/gmthreads.h
		foundation/gmthreads.cpp
		foundation/gmprofile.h
		foundation/gmprofile.cpp
		foundation/gmstring.h
		foundation/gmstring.cpp
		gmui/gmui.h
		gmui/gmui.cpp
		gmui/gmuicontrols.h
		gmui/gmuicontrols.cpp
		gmui/gmui_glwindow.h
		gmui/gmui_glwindow.cpp
		gmui/gmui_console.h
		gmui/gmui_console_ui.h
		gmui/gmui_console.cpp
	)

source_group_by_dir(SOURCES)
add_msvc_precompiled_header("stdafx.h" "stdafx.cpp" ${SOURCES})

add_library(gamemachine
		${SOURCES}
	)

add_definitions(-DFPM_DEFAULT)
add_definitions(-DUNICODE -D_UNICODE)

if(MSVC)
	set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS "/W3" ) 
	set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS "/WX" ) 
endif(MSVC)
